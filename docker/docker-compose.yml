version: '3.8'

services:
  # PostgreSQL pour Airflow
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - mlops-network

  # Redis pour Celery
  redis:
    image: redis:6-alpine
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - mlops-network

  # Airflow Init Service
  airflow-init:
    build: 
      context: ..
      dockerfile: docker/airflow/Dockerfile
    environment: &airflow-common-env
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: "B2YK2mP4SxZgVk65FbKYRIgLiuoq5vM7T2UeZAVbL6g="
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
      AIRFLOW__CORE__REMOTE_LOGGING: 'False'
    volumes:
      - ../airflow/dags:/opt/airflow/dags
      - ../airflow/plugins:/opt/airflow/plugins
      - ../airflow/config:/opt/airflow/config
      - ../src:/opt/airflow/src
      - ../configs:/opt/airflow/configs
      - ../models:/opt/airflow/models
      - ../reports:/opt/airflow/reports
      - /var/run/docker.sock:/var/run/docker.sock
    entrypoint: /bin/bash
    command:
      - -c
      - |
        echo "Creating missing opt dirs if missing:"
        mkdir -p /opt/airflow/{logs,dags,plugins,config}
        echo "Running airflow db migrate..."
        airflow db migrate
        echo "Creating admin user..."
        airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com || true
        echo "Init completed successfully"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mlops-network

  # Airflow Webserver
  airflow-webserver:
    build: 
      context: ..
      dockerfile: docker/airflow/Dockerfile
    environment:
      <<: *airflow-common-env
    volumes:
      - ../airflow/dags:/opt/airflow/dags
      - ../airflow/plugins:/opt/airflow/plugins
      - ../airflow/config:/opt/airflow/config
      - ../src:/opt/airflow/src
      - ../configs:/opt/airflow/configs
      - ../models:/opt/airflow/models
      - ../reports:/opt/airflow/reports
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8080:8080"
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    networks:
      - mlops-network

  # Airflow Scheduler
  airflow-scheduler:
    build: 
      context: ..
      dockerfile: docker/airflow/Dockerfile
    environment:
      <<: *airflow-common-env
    volumes:
      - ../airflow/dags:/opt/airflow/dags
      - ../airflow/plugins:/opt/airflow/plugins
      - ../airflow/config:/opt/airflow/config
      - ../src:/opt/airflow/src
      - ../configs:/opt/airflow/configs
      - ../models:/opt/airflow/models
      - ../reports:/opt/airflow/reports
      - /var/run/docker.sock:/var/run/docker.sock
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    networks:
      - mlops-network

  # Airflow Worker
  airflow-worker:
    build: 
      context: ..
      dockerfile: docker/airflow/Dockerfile
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      DUMB_INIT_SETSID: "0"
    volumes:
      - ../airflow/dags:/opt/airflow/dags
      - ../airflow/plugins:/opt/airflow/plugins
      - ../airflow/config:/opt/airflow/config
      - ../src:/opt/airflow/src
      - ../configs:/opt/airflow/configs
      - ../models:/opt/airflow/models
      - ../reports:/opt/airflow/reports
      - /var/run/docker.sock:/var/run/docker.sock
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      airflow-webserver:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    networks:
      - mlops-network

  # ML API
  ml-api:
    build:
      context: ..
      dockerfile: docker/api/Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./models:/app/models
      - ./data:/app/data
    environment:
      - MODEL_PATH=/app/models/classifier.pkl
      - SCALER_PATH=/app/data/processed/scaler.pkl
    depends_on:
      - prometheus
    restart: always
    networks:
      - mlops-network

  # MinIO pour DVC
  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
    command: server /data --console-address ":9001"
    restart: always
    networks:
      - mlops-network

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: always
    networks:
      - mlops-network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    restart: always
    networks:
      - mlops-network

  # Loki pour les logs
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    restart: always
    networks:
      - mlops-network

  # Promtail pour la collecte de logs
  promtail:
    image: grafana/promtail:latest
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    restart: always
    networks:
      - mlops-network

volumes:
  postgres_data:
  minio_data:
  prometheus_data:
  grafana_data:
  loki_data:

networks:
  mlops-network:
    driver: bridge